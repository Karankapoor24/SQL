SUPPOSE YOU ARE A DATA ANALYST WORKING FOR A TRAVEL COMPANY THAT OFFERS VACATION RENTALS SIMILAR TO AIRBNB. YOUR COMPANY WANTS TO IDENTIFY THE TOP HOSTS 
WITH THE HIGHEST AVERAGE RATINGS FOR THEIR LISTINGS. THIS INFORMATION WILL BE USED TO RECOGNIZE EXCEPTIONAL HOSTS AND POTENTIALLY OFFER THEM INCENTIVES TO 
CONTINUE PROVIDING OUTSTANDING SERVICE.

YOUR TASK IS TO WRITE AN SQL QUERY TO FIND THE TOP 2 HOSTS WITH THE HIGHEST AVERAGE RATINGS FOR THEIR LISTINGS. HOWEVER, YOU SHOULD ONLY CONSIDER HOSTS WHO 
HAVE AT LEAST 2 LISTINGS, AS HOSTS WITH FEWER LISTINGS MAY NOT BE REPRESENTATIVE.

DISPLAY OUTPUT IN DESCENDING ORDER OF AVERAGE RATINGS AND ROUND THE AVERAGE RATINGS TO 2 DECIMAL PLACES.

CREATE TABLE listings (
	listing_id INT,
	host_id INT,
	neighbourhood VARCHAR(30),
	room_type VARCHAR(30),
	price INT,
	minimum_nights INT
);

INSERT into listings VALUES
(1, 101, 'Downtown', 'Entire home/apt', 150, 2),
(2, 101, 'Downtown', 'Private room', 80, 1),
(3, 101, 'Downtown', 'Entire home/apt', 200, 3),
(4, 102, 'Downtown', 'Entire home/apt', 120, 2),
(5, 102, 'Downtown', 'Private room', 100, 1),
(6, 102, 'Midtown', 'Entire home/apt', 250, 2),
(7, 103, 'Midtown', 'Private room', 70, 1),
(8, 103, 'Queens', 'Private room', 90, 1),
(9, 104, 'Midtown', 'Private room', 170, 1)
;


CREATE TABLE reviews (
	review_id INT,
	listing_id INT,
	review_date DATE,
	rating INT
);

INSER INTO reviews VALUES 
(1, 1, '2023-01-05', 4),
(2, 1, '2023-01-10', 5),
(3, 2, '2023-01-15', 4),
(4, 3, '2023-01-20', 5),
(5, 3, '2023-01-25', 3),
(6, 3, '2023-01-30', 4),
(7, 4, '2023-02-05', 5),
(8, 5, '2023-02-10', 4),
(9, 6, '2023-02-15', 5),
(10, 6, '2023-02-20', 4),
(11, 7, '2023-03-25', 5),
(12, 8, '2023-03-05', 5),
(13, 9, '2023-03-05', 5)


SELECT TOP 2
	host_id, COUNT(DISTINCT l.listing_id) Count_of_listing,
	AVG(rating) AS avg_rating
FROM listings l
INNER JOIN reviews r
ON r.listing_id = l.listing_id
GROUP BY host_id
HAVING COUNT(DISTINCT l.listing_id) >= 2
ORDER BY 3 DESC
;


WITH CTE1 AS (
SELECT
	listing_id, host_id,
	COUNT(*) OVER(PARTITION BY host_id) as no_of_listing
FROM listings
), CTE2 AS (
SELECT * FROM CTE1
WHERE no_of_listing > 1
) 
SELECT TOP 2
	c.host_id, no_of_listing, 
	AVG(r.rating) AS avg_rating
FROM CTE2 c
INNER JOIN reviews r
ON c.listing_id = r.listing_id
GROUP BY c.host_id, no_of_listing
ORDER BY avg_rating DESC