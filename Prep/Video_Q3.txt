Write a sql query to return the footer values from input table, meaning all the last non null values from each field as shown in expected output.


DROP TABLE IF EXISTS FOOTER;
CREATE TABLE FOOTER 
(
	id 			INT PRIMARY KEY,
	car 		VARCHAR(20), 
	length 		INT, 
	width 		INT, 
	height 		INT
);

INSERT INTO FOOTER VALUES (1, 'Hyundai Tucson', 15, 6, NULL);
INSERT INTO FOOTER VALUES (2, NULL, NULL, NULL, 20);
INSERT INTO FOOTER VALUES (3, NULL, 12, 8, 15);
INSERT INTO FOOTER VALUES (4, 'Toyota Rav4', NULL, 15, NULL);
INSERT INTO FOOTER VALUES (5, 'Kia Sportage', NULL, NULL, 18); 

SELECT * FROM FOOTER;


Input

id	car				length	width	height
1	Hyundai Tucson	15		6		NULL
2	NULL			NULL	NULL	20
3	NULL			12		8		15
4	Toyota Rav4		NULL	15		NULL
5	Kia Sportage	NULL	NULL	18


Output

car				length	width	height
Kia Sportage	12		15		18


Solution

SELECT * FROM 
(SELECT TOP 1 car FROM FOOTER WHERE car is NOT NULL ORDER BY id DESC) car
CROSS JOIN (SELECT TOP 1 length FROM FOOTER WHERE length is NOT NULL ORDER BY id DESC) length
CROSS JOIN (SELECT TOP 1 width FROM FOOTER WHERE width is NOT NULL ORDER BY id DESC) width
CROSS JOIN (SELECT TOP 1 height FROM FOOTER WHERE height is NOT NULL ORDER BY id DESC) height
;



WITH cte AS (
SELECT 
	*, 
	SUM(CASE WHEN car is NOT NULL THEN 1 ELSE 0 END) OVER(ORDER BY id) AS car_segment,
	SUM(CASE WHEN length is NOT NULL THEN 1 ELSE 0 END) OVER(ORDER BY id) AS length_segment,
	SUM(CASE WHEN width is NOT NULL THEN 1 ELSE 0 END) OVER(ORDER BY id) AS width_segment,
	SUM(CASE WHEN height is NOT NULL THEN 1 ELSE 0 END) OVER(ORDER BY id) AS height_segment
FROM FOOTER
)
SELECT TOP 1
	FIRST_VALUE(car) OVER(PARTITION BY car_segment ORDER BY id) AS car,
	FIRST_VALUE(length) OVER(PARTITION BY length_segment ORDER BY id) AS car,
	FIRST_VALUE(width) OVER(PARTITION BY width_segment ORDER BY id) AS car,
	FIRST_VALUE(height) OVER(PARTITION BY height_segment ORDER BY id) AS car
FROM cte
ORDER BY id DESC


