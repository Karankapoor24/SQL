In the given input table, there are hotel ratings which are either too high or too low compared to the 
standard ratings the hotel receives each year. 
Write a query to identify and exclude these outlier records as shown in expected output below. 
Your output should follow the same order of records as shown.


drop table if exists hotel_ratings;
create table hotel_ratings
(
	hotel 		varchar(30),
	year		int,
	rating 		decimal(3,1)
);
insert into hotel_ratings values('Radisson Blu', 2020, 4.8);
insert into hotel_ratings values('Radisson Blu', 2021, 3.5);
insert into hotel_ratings values('Radisson Blu', 2022, 3.2);
insert into hotel_ratings values('Radisson Blu', 2023, 3.8);
insert into hotel_ratings values('InterContinental', 2020, 4.2);
insert into hotel_ratings values('InterContinental', 2021, 4.5);
insert into hotel_ratings values('InterContinental', 2022, 1.5);
insert into hotel_ratings values('InterContinental', 2023, 3.8);

select * from hotel_ratings;


Input

hotel				year	rating
Radisson Blu		2020	4.8
Radisson Blu		2021	3.5
Radisson Blu		2022	3.2
Radisson Blu		2023	3.8
InterContinental	2020	4.2
InterContinental	2021	4.5
InterContinental	2022	1.5
InterContinental	2023	3.8


Output

hotel				year	rating
InterContinental	2021	4.5
InterContinental	2020	4.2
InterContinental	2023	3.8
Radisson Blu		2022	3.2
Radisson Blu		2021	3.5
Radisson Blu		2023	3.8


Solution

WITH cte AS (
SELECT
	*,
	CAST(AVG(rating) OVER(PARTITION BY hotel ORDER BY year ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DECIMAL(4,2)) AS avg_rating
FROM hotel_ratings
), cte_rnk AS (
SELECT 
	*,
	abs(rating - avg_rating) AS rating_diff,
	RANK() OVER(PARTITION BY hotel ORDER BY abs(rating - avg_rating) DESC) AS rn
FROM cte
)
SELECT
	hotel, year, rating
FROM cte_rnk
WHERE rn > 1


WITH cte AS (
SELECT
	*,
	CAST(AVG(rating) OVER(PARTITION BY hotel ORDER BY year ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DECIMAL(4,2)) AS avg_rating,
	CAST(STDEV(rating) OVER (PARTITION BY hotel ORDER BY year ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DECIMAL(4,2)) AS std_dev
FROM hotel_ratings
), cte1 AS (
SELECT
	*,
	(rating - avg_rating) / std_dev AS z_scores
FROM cte
)
SELECT
	hotel, year, rating
FROM cte1
WHERE abs(z_scores) < 1.4

