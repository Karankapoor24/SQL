/*
PROBLEM STATEMENT: 
Given vacation_plans tables shows the vacations applied by each employee during the year 2024. 
Leave_balance table has the available leaves for each employee.
Write an SQL query to determine if the vacations applied by each employee can be approved or not based on the available leave balance. 
If an employee has enough available leaves then mention the status as "Approved" else mention "Insufficient Leave Balance".
Assume there are no public holidays during 2024. weekends (sat & sun) should be excluded while calculating vacation days. 
*/


drop table if exists vacation_plans;
create table vacation_plans
(
	id 			int primary key,
	emp_id		int,
	from_dt		date,
	to_dt		date
);
insert into vacation_plans values(1,1, '2024-02-12', '2024-02-16');
insert into vacation_plans values(2,2, '2024-02-20', '2024-02-29');
insert into vacation_plans values(3,3, '2024-03-01', '2024-03-31');
insert into vacation_plans values(4,1, '2024-04-11', '2024-04-23');
insert into vacation_plans values(5,4, '2024-06-01', '2024-06-30');
insert into vacation_plans values(6,3, '2024-07-05', '2024-07-15');
insert into vacation_plans values(7,3, '2024-08-28', '2024-09-15');


drop table if exists leave_balance;
create table leave_balance
(
	emp_id			int,
	balance			int
);
insert into leave_balance values (1, 12);
insert into leave_balance values (2, 10);
insert into leave_balance values (3, 26);
insert into leave_balance values (4, 20);
insert into leave_balance values (5, 14);

select * from vacation_plans;
select * from leave_balance;



Solution


WITH dateSeries AS (
    SELECT 
        id, emp_id, from_dt, to_dt,
        from_dt AS dates
    FROM vacation_plans

    UNION ALL

    SELECT
        id, emp_id, from_dt, to_dt,
        DATEADD(DAY, 1, dates)
    FROM dateSeries
    WHERE dates < to_dt
),
filteredDates AS (
    SELECT 
        id, emp_id, from_dt, to_dt, dates
    FROM dateSeries
    WHERE DATENAME(WEEKDAY, dates) NOT IN ('Saturday', 'Sunday')
),
order_leaves AS (
    SELECT
        fd.id,
        fd.emp_id,
        fd.from_dt,
        fd.to_dt,
        COUNT(*) AS leaves_requested,
        MAX(lb.balance) AS balance,
        ROW_NUMBER() OVER(PARTITION BY fd.emp_id ORDER BY fd.id) AS rn
    FROM filteredDates fd
    JOIN leave_balance lb ON fd.emp_id = lb.emp_id
    GROUP BY fd.id, fd.emp_id, fd.from_dt, fd.to_dt
),
final_cte AS (
SELECT 
	*,
	balance - leaves_requested AS remaining_balance
FROM order_leaves
WHERE rn = 1

UNION ALL

SELECT 
	o.*,
	f.remaining_balance - o.leaves_requested AS remaining_balance
FROM final_cte f
JOIN order_leaves o 
ON o.rn = f.rn+1 AND o.emp_id = f.emp_id
)
SELECT 
	id, emp_id, from_dt, to_dt, leaves_requested AS vacatin_days,
	CASE WHEN remaining_balance < 0 THEN 'Insufficient Leave Balance'
		 else 'Approved'
	END AS status
FROM final_cte