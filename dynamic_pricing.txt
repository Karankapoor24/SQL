You are given a products table where a new row is inserted every time the price of a product changes. 
Additionally, there is a transaction table containing details such as order_date and product_id for each order.
 
Write an SQL query to calculate the total sales value for each product, considering the cost of the product at the time of the order date, 
display the output in ascending order of the product_id.
 

CREATE TABLE prods (
	product_id INT,
	price_date DATE,
	price INT
);

INSERT INTO prods VALUES
(100, '2024-01-01', 150),
(100, '2024-01-21', 170),
(100, '2024-02-01', 190),
(101, '2024-01-01', 1000),
(101, '2024-01-27', 1200),
(101, '2024-02-05', 1250)

CREATE TABLE orders (
	order_id INT,
	order_date DATE,
	product_id INT
);


INSERT INTO orders VALUES
(1, '2024-01-05', 100),
(2, '2024-01-21', 100),
(3, '2024-02-20', 100),
(4, '2024-01-07', 101),
(5, '2024-02-04', 101),
(6, '2024-02-05', 101)


Output

product_id	TOTAL_SALES
100			510
101			3450


Solution

WITH cte1 AS (
SELECT 
	*,
	DATEADD(day, -1, LEAD(price_date, 1, '9999-12-31') OVER(PARTITION BY product_id ORDER BY price_date)) AS price_end_date
FROM prods
)
SELECT 
	c.product_id,
	SUM(c.price) AS TOTAL_SALES
FROM cte1 c
INNER JOIN orders o
ON o.product_id = c.product_id AND o.order_date BETWEEN c.price_date AND c.price_end_date
GROUP BY c.product_id
ORDER BY c.product_id